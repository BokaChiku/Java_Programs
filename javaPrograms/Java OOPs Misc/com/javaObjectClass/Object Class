Object Class in Java:

1. The Object class is the parent class of all the classes in java by default.

2. It is thee topmost class in other classes.

3.It is benificial if you want to refer any object whose type you don't know.

4. Notice hat parent class reference variable can refer the chcild class object, is known as upcasting.

Example: Object obj = getObject(); // we don't know what object will be returned from this method.

5. Object class provides soe common behaviors to all the objects such as object from can be compared, object can be cloned, object can be notified etc. 

Methods of Object Class:

1) public final Class getClass() => returns The Class class object of this object. It is used to get the metadata of this class.

2) public int hashCode() => returns the hascode number for the object.

3) public boolean equals(object obj) => Compare the given object to this object.

4) protected Object clone() throws CloneNotSupportedException => Cereate and returnsthe exact copy ( clone) of ths object.

5) public String toString() => returns the string representation of this object.

6) public final void notify() => wakes up single thread, waiting on this object's monitor.

7) public final void notifyAll() => wakes up all thread, waiting on this object's monitor.

8) public final void wait(long timeout) throws InterruptedException => causes the current thread to wait for the specified millseconds, until another thread notifies (invoke notify() or notifyAll() method).

9) public final void wait(long timeout, int nanos) throws InterruptedException => causes the current thread to wait for the specified millseconds and nanoseconds, until another thread notifies (invoke notify() or notifyAll() method).

10) public final void wait()throws InterruptedExzception => cause the xurrent thread to wait, until another thread notifies (invoke notify() or notifyAll() method)

11) protected void finaize()throws Throwable => is invoked by the garbage collector before object is being garbage collected.